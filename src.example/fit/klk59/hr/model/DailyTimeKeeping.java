package klk59.hr.model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;
import domainapp.basics.model.meta.DAssoc.Associate;

@DClass(schema="hr")
public class DailyTimeKeeping implements Comparable{
	// attributes
	@DAttr(name = "id", id = true, auto = true, type = Type.Integer, length = 5, optional = false, mutable = false)
	private int id;
	private static int idCounter = 0;

	@DAttr(name = "employee", type = Type.Domain, length = 5, optional = false)
	@DAssoc(ascName = "employee-has-dailyTimeKeepings", role = "dailyTimeKeeping", 
	  	ascType = AssocType.One2Many, endType = AssocEndType.Many, 
	    associate = @Associate(type = Employee.class, cardMin = 1, cardMax = 1), dependsOn = true)
	private Employee employee;

	@DAttr(name = "typeOfWork", type = Type.Domain, length = 5, optional = false)
	@DAssoc(ascName = "typeOfWork-has-dailyTimeKeepings", role = "dailyTimeKeeping", 
	    ascType = AssocType.One2Many, endType = AssocEndType.Many, 
	    associate = @Associate(type = TypeOfWork.class, cardMin = 1, cardMax = 1), dependsOn = true)
	private TypeOfWork typeOfWork;
	
	@DAttr(name="dateOfWork",type=Type.String,length=30,optional=false)
	private String dateOfWork;
	
	@DAttr(name="hourOfWork",type=Type.Integer,length=30,optional=false)
	private int hourOfWork;

	
	// constructor method
	@DOpt(type=DOpt.Type.ObjectFormConstructor)
	@DOpt(type=DOpt.Type.RequiredConstructor)
	public DailyTimeKeeping(@AttrRef("employee") Employee e, 
	      @AttrRef("typeOfWork") TypeOfWork t,
	      @AttrRef("dateOfWork") String d,
	      @AttrRef("hourOfWork") int h
	      ) throws ConstraintViolationException {
	    this(null, e, t, d, h);
	}

	@DOpt(type=DOpt.Type.DataSourceConstructor)
	public DailyTimeKeeping(Integer id, Employee e, TypeOfWork t, String d, int h) throws ConstraintViolationException {
	    this.id = nextID(id);
	    this.employee = e;
	    this.typeOfWork = t;
	    this.dateOfWork = d;
	    this.hourOfWork = h;
	}
	// setter methods
	public void setEmployee(Employee e) {
	    this.employee = e;
	}

	public void setTypeOfWork(TypeOfWork t) {
	    this.typeOfWork = t;
	}
	
	public void setDateOfWork(String d) {
		this.dateOfWork = d;
	}
	
	public void setHourOfWork(int h) {
		this.hourOfWork = h;
	}

	  
	  // getter methods
	  public int getId() {
	    return id;
	  }

	  public Employee getEmployee() {
	    return employee;
	  }

	  public TypeOfWork getTypeOfWork() {
	    return typeOfWork;
	  }
	  
	  public String getDateOfWork() {
		  return dateOfWork;
	  }
	  
	  public int getHourOfWork() {
		  return hourOfWork;
	  }
	  
	  
	  // override toString
	  @Override
	  public String toString() {
	    return toString(false);
	  }

	  public String toString(boolean full) {
	    if (full)
	      return "DailyTimeKeeping(" + employee + "," + typeOfWork + ")";
	    else
	      return "DailyTimeKeeping(" + getId() + "," + employee.getId() + ")";
	  }

	  @Override
	  public int hashCode() {
	    final int prime = 31;
	    int result = 1;
	    result = prime * result + id;
	    return result;
	  }

	  @Override
	  public boolean equals(Object obj) {
	    if (this == obj)
	      return true;
	    if (obj == null)
	      return false;
	    if (getClass() != obj.getClass())
	      return false;
	    DailyTimeKeeping other = (DailyTimeKeeping) obj;
	    if (id != other.id)
	      return false;
	    return true;
	  }

	  private static int nextID(Integer currID) {
	    if (currID == null) { // generate one
	      idCounter++;
	      return idCounter;
	    } else { // update
	      int num;
	      num = currID.intValue();

	      // if (num <= idCounter) {
	      // throw new
	      // ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE,
	      // "Lỗi giá trị thuộc tính ID: {0}", num + "<=" + idCounter);
	      // }

	      if (num > idCounter) {
	        idCounter = num;
	      }
	      return currID;
	    }
	  }

	  /**
	   * @requires minVal != null /\ maxVal != null
	   * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	   *          specified for <tt>derivingValue</tt>, using
	   *          <tt>minVal, maxVal</tt>
	   */
	  @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	  public static void updateAutoGeneratedValue(DAttr attrib,
	      Tuple derivingValue, Object minVal, Object maxVal)
	      throws ConstraintViolationException {
	    if (minVal != null && maxVal != null) {
	      // check the right attribute
	      if (attrib.name().equals("id")) {
	        int maxIdVal = (Integer) maxVal;
	        if (maxIdVal > idCounter)
	          idCounter = maxIdVal;
	      }
	      // TODO add support for other attributes here
	    }
	  }

	  // private static int nextID(Integer currID) {
	  // if (currID == null) { // generate one
	  // idCounter++;
	  // return idCounter;
	  // } else { // update
	  // // int num = currID.intValue();
	  // //
	  // // if (num > idCounter)
	  // // idCounter=num;
	  // setIdCounter(currID);
	  //
	  // return currID;
	  // }
	  // }
	  //
	  // /**
	  // * This method is required for loading this class metadata from storage
	  // *
	  // * @requires
	  // * id != null
	  // * @effects
	  // * update <tt>idCounter</tt> from the value of <tt>id</tt>
	  // */
	  // public static void setIdCounter(Integer id) {
	  // if (id != null) {
	  // int num = id.intValue();
	  //
	  // if (num > idCounter)
	  // idCounter=num;
	  // }
	  // }

	  // implements Comparable interface
	  public int compareTo(Object o) {
	    if (o == null || (!(o instanceof DailyTimeKeeping)))
	      return -1;

	    DailyTimeKeeping e = (DailyTimeKeeping) o;

	    return this.employee.getId().compareTo(e.employee.getId());
	  }
}
